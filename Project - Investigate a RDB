/*Let's start with creating a table that provides the following details: actor's first and last name combined as full_name, film title, film description and length of the movie.
How many rows are there in the table? 5462 rows*/

SELECT CONCAT(first_name || ' ' || last_name) AS full_name, f.title title, f.description description, f.length length
FROM actor a
JOIN film_actor fa
	ON fa.actor_id = a.actor_id  
JOIN film f
	ON f.film_id = fa.film_id;

/*Write a query that creates a list of actors and movies where the movie length was more than 60 minutes.
How many rows are there in this query result? 4900 rows*/

SELECT CONCAT(first_name || ' ' || last_name) AS full_name, f.title title, f.length length
FROM actor a
JOIN film_actor fa
	ON fa.actor_id = a.actor_id  
JOIN film f
	ON f.film_id = fa.film_id 
WHERE f.length > 60;

/*Write a query that captures the actor id, full name of the actor, and counts the number of movies each actor has made. (HINT: Think about whether you should group by actor id or the full name of the actor.)
Identify the actor who has made the maximum number movies: Gina Degeneres (42)*/

WITH t1 AS (
	SELECT a.actor_id id, CONCAT(first_name || ' ' || last_name) AS full_name, f.title title
	FROM actor a
	JOIN film_actor fa
		ON fa.actor_id = a.actor_id  
	JOIN film f
		ON f.film_id = fa.film_id)
SELECT id, full_name, COUNT(*) film_count
FROM t1
GROUP BY 1, 2
ORDER BY 3 DESC;

/*Write a query that displays a table with 4 columns: actor's full name, film title, length of movie, and a column name "filmlen_groups" that classifies movies based on their length. Filmlen_groups should include 4 categories: 1 hour or less, Between 1-2 hours, Between 2-3 hours, More than 3 hours.*/

SELECT CONCAT(first_name || ' ' || last_name) AS full_name, f.title title, f.length length,
CASE WHEN f.length <= 60 THEN '1 hour or less'
WHEN f.length > 60 AND f.length <= 120 THEN 'Between 1-2 hours'  
WHEN f.length > 120 AND f.length <= 180 THEN 'Between 2-3 hours'
WHEN f.length > 180 THEN 'More than 3 hours' END AS filmlen_groups
FROM actor a
JOIN film_actor fa
	ON fa.actor_id = a.actor_id  
JOIN film f
	ON f.film_id = fa.film_id;

/*Now, we bring in the advanced SQL query concepts! Revise the query you wrote above to create a count of movies in each of the 4 filmlen_groups: 1 hour or less, Between 1-2 hours, Between 2-3 hours, More than 3 hours.*/

WITH t1 AS 
  (SELECT f.title, f.length length,
  CASE WHEN f.length <= 60 THEN '1 hour or less'
  WHEN f.length > 60 AND f.length <= 120 THEN 'Between 1-2 hours'  
  WHEN f.length > 120 AND f.length <= 180 THEN 'Between 2-3 hours'
  WHEN f.length > 180 THEN 'More than 3 hours' END AS filmlen_groups
  FROM actor a
  JOIN film_actor fa
      ON fa.actor_id = a.actor_id  
  JOIN film f
      ON f.film_id = fa.film_id
  GROUP BY 1, 2)
      
SELECT filmlen_groups, COUNT(*) len_group_count
FROM t1
GROUP BY 1;

/*the same with WINDOW FUNCTIONS */

SELECT    DISTINCT(filmlen_groups),
          COUNT(title) OVER (PARTITION BY filmlen_groups) AS filmcount_bylencat
FROM  
         (SELECT title,length,
          CASE WHEN length <= 60 THEN '1 hour or less'
          WHEN length > 60 AND length <= 120 THEN 'Between 1-2 hours'
          WHEN length > 120 AND length <= 180 THEN 'Between 2-3 hours'
          ELSE 'More than 3 hours' END AS filmlen_groups
          FROM film ) t1
ORDER BY  filmlen_groups


/*Question 1
We want to understand more about the movies that families are watching. 
The following categories are considered family movies: Animation, Children, Classics, Comedy, Family and Music.
Create a query that lists each movie, the film category it is classified in, and the number of times it has been rented out.*/

WITH t1 AS (
	SELECT c.name category, f.title film_title
	FROM category c
	JOIN film_category fc
		ON fc.category_id = c.category_id
	JOIN film f
		ON f.film_id = fc.film_id
	JOIN inventory i
		ON i.film_id = f.film_id
	JOIN rental r
		ON r.inventory_id = i.inventory_id
	WHERE c.name IN ('Animation','Children','Classics', 'Comedy','Family','Music'))
SELECT film_title, category, COUNT(*) rental_count
FROM t1
GROUP BY 2, 1
ORDER BY 2, 1;

/*Question 2
Now we need to know how the length of rental duration of these family-friendly movies compares to the duration that all movies are rented for. 
Can you provide a table with the movie titles and divide them into 4 levels 
(first_quarter, second_quarter, third_quarter, and final_quarter) based on the quartiles (25%, 50%, 75%) of the rental duration 
for movies across all categories? 
Make sure to also indicate the category that these family-friendly movies fall into.*/

SELECT film_title, category, rental_duration, standard_quartile
FROM
	(SELECT film_title, category, rental_duration, NTILE(4) OVER (ORDER BY rental_duration) AS standard_quartile
	FROM
		(SELECT f.title film_title, c.name category,
		ROUND(AVG(DATE_PART('day', return_date - rental_date))) AS rental_duration
		FROM rental r
		JOIN inventory i
			ON r.inventory_id = i.inventory_id
		JOIN film f
			ON i.film_id = f.film_id
		JOIN film_category fc
			ON f.film_id = fc.film_id
		JOIN category c
			ON fc.category_id = c.category_id
		GROUP BY 1, 2
		ORDER BY 2) t1
	) t2
WHERE category IN ('Animation','Children','Classics', 'Comedy','Family','Music');